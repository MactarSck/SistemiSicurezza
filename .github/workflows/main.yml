name: Pipeline Control Security

on: [push]

jobs:
  ci:
    name: Pipeline Security
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: onlinebookstore
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout codice
        uses: actions/checkout@v3

      - name: Configura JDK 17 (Temurin)
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Cache dipendenze Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Cache pacchetti SonarQube
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Attendi MySQL
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h127.0.0.1 -uroot -proot --silent; then
              echo "MySQL pronto!"
              break
            fi
            echo "Attendo MySQL..."
            sleep 2
          done

      - name: Inizializza database
        run: |
          mysql -h127.0.0.1 -uroot -proot <<EOF
          USE onlinebookstore;
          CREATE TABLE IF NOT EXISTS books(
            barcode VARCHAR(100) PRIMARY KEY,
            name VARCHAR(100),
            author VARCHAR(100),
            price INT,
            quantity INT
          );
          CREATE TABLE IF NOT EXISTS users(
            username VARCHAR(100) PRIMARY KEY,
            password VARCHAR(100),
            firstname VARCHAR(100),
            lastname VARCHAR(100),
            address TEXT,
            phone VARCHAR(100),
            mailid VARCHAR(100),
            usertype INT
          );
          INSERT INTO books VALUES(
            '9780134190563',
            'The Go Programming Language',
            'Alan A. A. Donovan and Brian W. Kernighan',
            400,
            8
          );
          INSERT INTO users VALUES(
            'shashi',
            'shashi',
            'Shashi',
            'Raj',
            'Bihar',
            '1236547089',
            'shashi@gmail.com',
            2
          );
          COMMIT;
          EOF

      - name: Build progetto (Maven)
        run: mvn clean install -B

      - name: Esegui SonarQube Scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=MactarSck_SistemiSicurezza

      - name: Esegui Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        continue-on-error: true
        env:
          JAVA_HOME: /opt/jdk
        with:
          project: onlinebookstore
          path: '.'
          format: HTML
          out: reports
          args: >
            --failOnCVSS 7
            --enableRetired

      - name: Carica report Dependency Check
        uses: actions/upload-artifact@v4
        with:
          name: Report-Dependency-Check
          path: reports

      - name: Carica artefatto WAR
        uses: actions/upload-artifact@v4
        with:
          name: artefatto-app
          path: target/*.war
