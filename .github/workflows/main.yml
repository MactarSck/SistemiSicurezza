name: Pipeline Control Security

on: [push]

jobs:
  setup-db:
    name: Setup Database
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: onlinebookstore
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Attendi MySQL
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h127.0.0.1 -uroot -proot --silent; then
              echo "MySQL pronto!"
              break
            fi
            echo "Attendo MySQL..."
            sleep 2
          done

      - name: Inizializza database con dati casuali
        run: |
          mysql -h127.0.0.1 -uroot -proot <<EOF
          USE onlinebookstore;
          CREATE TABLE IF NOT EXISTS books(
            barcode VARCHAR(100) PRIMARY KEY,
            name VARCHAR(100),
            author VARCHAR(100),
            price INT,
            quantity INT
          );
          CREATE TABLE IF NOT EXISTS users(
            username VARCHAR(100) PRIMARY KEY,
            password VARCHAR(100),
            firstname VARCHAR(100),
            lastname VARCHAR(100),
            address TEXT,
            phone VARCHAR(100),
            mailid VARCHAR(100),
            usertype INT
          );
          INSERT INTO books VALUES
            ('9780143127741', 'Random Book One', 'Author A', FLOOR(RAND()*1000), FLOOR(RAND()*50)),
            ('9780262033848', 'Random Book Two', 'Author B', FLOOR(RAND()*1000), FLOOR(RAND()*50)),
            ('9780131103627', 'Random Book Three', 'Author C', FLOOR(RAND()*1000), FLOOR(RAND()*50));
          INSERT INTO users VALUES
            ('user1', 'pass1', 'John', 'Doe', '123 Random St', '5551234567', 'john.doe@example.com', 1),
            ('user2', 'pass2', 'Jane', 'Smith', '456 Example Rd', '5559876543', 'jane.smith@example.com', 2),
            ('user3', 'pass3', 'Alice', 'Johnson', '789 Test Blvd', '5557654321', 'alice.johnson@example.com', 2);
          COMMIT;
          EOF

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: setup-db
    steps:
      - name: Checkout codice
        uses: actions/checkout@v3

      - name: Configura JDK 17 (Temurin)
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Cache dipendenze Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build progetto (Maven)
        run: mvn clean install -B

      - name: Carica artefatto WAR
        uses: actions/upload-artifact@v4
        with:
          name: artefatto-app
          path: target/*.war

  sonar:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout codice
        uses: actions/checkout@v3

      - name: Configura JDK 17 (Temurin)
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Cache pacchetti SonarQube
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Esegui SonarQube Scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=MactarSck_SistemiSicurezza

  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout codice
        uses: actions/checkout@v4

      - name: Configura JDK 17 (Temurin)
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Esegui Dependency Check
        uses: dependency-check/cli-action@v1.0.0
        with:
          project: onlinebookstore
          path: '.'                # cartella da analizzare
          format: HTML
          out: reports             # cartella dove sarà salvato il report
          args: >
            --failOnCVSS 10        # fallisce solo con vulnerabilità critiche

      - name: Carica il report Dependency Check
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Dependency-Check-Report
          path: reports
